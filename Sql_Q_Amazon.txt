

SELECT o.OrderID, sum(Quantity *Price), od.OrderDate  FROM [OrderDetails] as o join 
[Products] as p join
[Orders] as od
ON  o.OrderID = od.OrderID and o.ProductID = p.ProductID 
GROUP BY o.OrderID,OrderDate ORDER BY o.OrderID;

HackerRank Q for Amazon Data Engineer

There is an order table with attrib order_day, id, pid, quantity, price
1, all product that got sold both days and number of times product is sold.

SELECT pid, COUNT(*) AS COUNT FROM Order GROUP BY pid

2. Get product ordered on 2nd july but not on 1st July

SELECT Pid from Orders WHERE order_day = '02-JUL-11' AND order_day != '01-JUL-11'

3. Get me highest sold products(Qty*Price) on both days

SELECT order_day,pid,SUM(price * Quantity) from Order GROUP BY order_day,pid DESC ORDER BY order_day limit 1

4. Get me all products, total sale on 01-JUL-11 and 02-JUL-11 adjacent to each other

SELECT pid, SUM(IF(order_day = "01-JUL-11",qty*price,0)) as TOTAL_SALES-01, 
SUM(IF(order_day = "02-JUL-11",qty*price,0)) as TOTAL_SALES-02
from Orders GROUP By pid;

5. Get me all products day vis, that was ordered more than once

	SELECT order_day, pid FROM Orders GROUP BY order_day,pid having count(pid) > 1
6. 	explode the above data into single records
	SELECT id,pid, 1 as Qnt from Order;
	
7. 	Top product by sale in each of product group and additionally gather GV, Inventory and ad spend measure also for product
	product dimention table( pid, pgrp, pname) ,Sales Fact Table(day, pid, amt), Inventory fact table ,Ad_spend_fact_table, 

	
	SELECT p.PRODUCT_GROUP,p.pid,max(p.amt) 
	FROM Product p
	JOIN sales_fact s
	GROUP BY p.PRODUCT_GROUP,p.id
	
	SELECT p.PRODUCT_GROUP,p.pid,rank() over (PARTITION BY p.PRODUCT_GROUP ORDER BY p.amt) as RNK, 
	nvl(gv.GLANCE_VIEWS,0), nvl(iv.ON_HAND_QUANTITY,0), nvl(ad.AD_SPENT,0)
	FROM Product p
	JOIN sales_fact s
	GROUP BY p.PRODUCT_GROUP,p.id
	
	SELECT p.PRODUCT_GROUP,p.pid
	FROM Product p
	JOIN sales_fact s
	JOIN Glance_view_fact g
	JOIN Inventory_fact i
	JOIN Ad_spend_fact a
	ON p.pid = s.pid AND
	ON s.pid = g.pid AND
	ON g.pid = i.pid AND
	ON i.pid = a.pid

	
8. Write a SQL to give all Products that have glance views but no sales.
   SELECT p.pid from glance_view_fact WHERE p.pid NOT IN( SELECT pid from sales_fact)
    
9.  Write a SQL to give the sales of Electronics as a Percentage of Books
	select ESUM/BSUM * 100 from 
	((select p.PRODUCT_GROUP,sum(s.SALE_AMT) AS ESUM FROM product p
	JOIN  sales_fact s ON p.pid = s.id WHERE P.PRODUCT_GROUP = "Electronics" group by p.PRODUCT_GROUP)
	 UNION
	 (select p.PRODUCT_GROUP,sum(s.SALE_AMT) AS BSUM FROM product p
	JOIN  sales_fact s ON p.pid = s.id WHERE P.PRODUCT_GROUP = "Book" group by p.PRODUCT_GROUP))

10.  Please provide an SQL query to display the source_phone_number and a flag where the flag needs to be set to Y if first called number and last called number are the same and N if the first called number and last called number are different.
	
	select s as source_phone_number, if(First(timestamp) == last(timestamp),"Y","N") as STATUS from PHONE_LOG GROUP BY s,d
	select s as source_phone_number, if(first(source_phone_number) == last(timestamp),"Y","N") as STATUS from PHONE_LOG GROUP BY s,d
	
	
	select CustomerID as source_phone_number,GROUP_CONCAT(ShipperID ORDER BY OrderDate) as d_set,MIN(OrderDate) as F, MAX(OrderDate) as L from  [Orders] GROUP BY CustomerID
	
	SELECT source_phone_number, IF(RNK>2, from (select CustomerID as source_phone_number,DENSE_RANK() over (PARTITION BY CustomerID,ShipperID ORDER BY OrderDate) as RNK  from [Orders])
	rank() over (PARTITION BY p.PRODUCT_GROUP ORDER BY p.amt) as RNK
	
	[‎6/‎20/‎2017 4:00 PM] Uniyal, Pankaj: 
select SOURCE_PHONE_NUMBER, DESTINATION_PHONE_NUMBER , CALL_START_DATETIME from xyz where CALL_START_DATETIME =MA:@CALL_START_DATETIME )
GROUP BY sensorID 
ORDER BY max(timestamp) 

select CustomerID, ShipperID,OrderDate from [Orders] WHERE OrderDate = (select max(OrderDate) FROM  [Orders] group by CustomerID
order by max(OrderDate))

SELECT CustomerID,GROUP_CONCAT(ShipperID), COUNT(ShipperID) FROM [Orders] GROUP BY CustomerID having COUNT(ShipperID) > 1  ;

select A.CustomerID,A.ShipperID,OrderDate from [Orders] A JOIN (select max(OrderDate) as max_o FROM  [Orders]) B
ON A.OrderDate = B.max_o
group by A.CustomerID,A.ShipperID
order by OrderDate

select CustomerID, ShipperID,OrderDate from [Orders] where CustomerID IN (66,21)



select A.CustomerID,A.ShipperID,OrderDate from [Orders] group by A.CustomerID,A.ShipperID order by OrderDate

select A.CustomerID,A.ShipperID,OrderDate from [Orders] A group by A.CustomerID having MAX order by A.CustomerID

select A.CustomerID,GROUP_CONCAT(OrderDate) as SE,MAX(OrderDate) from [Orders] A group by A.CustomerID having FIND_IN_SET(MAX(OrderDate),SE) > 1


SELECT GROUP_CONCAT(Name ORDER BY Name asc),Occupation   FROM OCCUPATIONS GROUP BY Occupation;



/*  HackerRank MySQL  */
https://www.hackerrank.com/challenges/the-pads/problem
select CONCAT(CONCAT(CONCAT(Name,"("),SUBSTR(Occupation,1,1)),")")  from OCCUPATIONS order by Name ; 
SELECT TBL.a,TBL.b FROM (SELECT DISTINCT CONCAT("There are a total of ",COUNT(Occupation)) as a, CONCAT(LCASE(Occupation),"s.") as b,Occupation FROM OCCUPATIONS GROUP BY Occupation ORDER BY a) TBL ORDER BY TBL.a,TBL.Occupation; 

----

/*
Hackerrank MySQL query to tranverse to column
https://www.hackerrank.com/challenges/occupations/problem
Without Piviot function

SELECT 
(CASE WHEN Occupation = 'Doctor' THEN Name END) as Doctor,
(CASE WHEN Occupation = 'Professor' THEN Name END) as Professor,
(CASE WHEN Occupation = 'Singer' THEN Name END) as Singer,
(CASE WHEN Occupation = 'Actor' THEN Name END) as Actor 
FROM OCCUPATIONS  ORDER BY Name;
(CASE WHEN Occupation = 'Doctor' THEN Name END) ASC,
(CASE WHEN Occupation = 'Professor' THEN Name END) ASC,
(CASE WHEN Occupation = 'Singer' THEN Name END) ASC,
(CASE WHEN Occupation = 'Actor' THEN Name END) ASC
*/


set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    case when Occupation='Doctor' then Name end as Doctor,
    case when Occupation='Professor' then Name end as Professor,
    case when Occupation='Singer' then Name end as Singer,
    case when Occupation='Actor' then Name end as Actor
  from OCCUPATIONS
  order by Name
) Temp
group by RowNumber
----

/* HackerRank Binary Tree Nodes
https://www.hackerrank.com/challenges/binary-search-tree-1/problem


 SELECT N, IF(P IS NULL,'Root',IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,'Inner','Leaf')) FROM BST AS B ORDER BY N;
 



/*
https://www.hackerrank.com/challenges/the-company/problem
*/

 SELECT C.company_code,C.founder,
COUNT(LM.lead_manager_code),
COUNT(SM.senior_manager_code), 
COUNT(M.manager_code)
from Company C
JOIN
Lead_manager LM
JOIN
Senior_manager SM
JOIN
Manager M
JOIN
Employee E
ON (C.company_code = LM.company_code) AND 
(LM.company_code = SM.company_code) AND
(SM.company_code = M.company_code) AND
(M.company_code = E.company_code) 
GROUP BY C.founder,C.company_code ORDER BY C.company_code asc ;




/* 
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
*/

SELECT DISTINCT CITY FROM STATION WHERE Substr(CITY, -1, 1) IN ('a','e','i','o','u');
/*
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates
*/
select CITY from STATION where LOWER(Substr(CITY,1,1)) IN ('a','e','i','o','u');


Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.


SELECT CITY, LENGTH(CITY) FROM STATION WHERE LENGTH(CITY) IN (SELECT MIN(LENGTH(CITY))  as LEN_MIN FROM STATION);
SELECT CITY, LENGTH(CITY) FROM STATION WHERE LENGTH(CITY) IN (SELECT MAX(LENGTH(CITY)) AS LEN_MAX  FROM STATION);



html5, DNS domain 


